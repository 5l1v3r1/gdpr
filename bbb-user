#!/usr/bin/ruby
#
# BlueButton open source conferencing system - http://www.bigbluebutton.org/
#
# Copyright (c) 2018 BigBlueButton Inc. and by respective authors (see below).
#
# This program is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free Software
# Foundation; either version 3.0 of the License, or (at your option) any later
# version.
#
# BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
#
# bbb-user.rb
#

require 'trollop'
require 'nokogiri'
require 'csv'
require 'terminal-table'
require 'fileutils'

opts = Trollop.options do
  opt :getData, 'get users data'
  opt :DelData, 'delete users data'
  opt :dryrun,  'dry run users data'
  opt :userId, 'userId', type: :string
  opt :recordingsPath, 'recordingPath', type: :string, default: '/var/bigbluebutton/recording/raw/'
end

def bbb_user_data_all(user_id, recordings_path)
  File.exist?("/tmp/#{user_id}") && system("rm -r /tmp/#{user_id}")
  system("mkdir /tmp/#{user_id}; mkdir /tmp/#{user_id}/info; mkdir /tmp/#{user_id}/videos; mkdir /tmp/#{user_id}/deskshare; mkdir /tmp/#{user_id}/audio; mkdir /tmp/#{user_id}/presentation;")
  files_checked = files_found = 0
  Dir.glob("#{recordings_path}*/events.xml") do |file|
    bbb_user = BbbUserData.new(user_id, File.dirname(file))
    bbb_user.user_data && files_found += 1
    files_checked += 1
  end
  if files_checked <= 0
    puts 'Could not find any recording in this Directory.'
    puts "Path: #{recordings_path}"
  elsif Dir.entries("/tmp/#{user_id}/info").size <= 2 
    puts "User #{user_id} was not found in #{files_checked} recordings.\n"
  else
    puts "User #{user_id} found in #{files_found} out of #{files_checked} recordings."
    system "zip -r /tmp/#{user_id}.zip /tmp/#{user_id};"
    system "rm -r /tmp/#{user_id}"
    puts "Created User Info file in: /tmp/#{user_id}"
  end
end

def bbb_user_data_forget_all(user_id, recordings_path, dry)
  file_found = file_checked = 0
  Dir.glob("#{recordings_path}*/events.xml") do |file|
    bbb_user_forget =  BbbUserDataForget.new(user_id, File.dirname(file), dry)
    if bbb_user_forget.delUserInfo 
      file_found += 1
      puts system("bbb-record --rebuild #{File.basename(File.dirname(file))}")
      puts "bbb record #{File.basename(File.dirname(file))} is rebuilding."
      puts 'Please be patient until you see the changes.'
    end
    file_checked += 1
  end
  if file_checked <= 0
    puts 'Could not find any recording in this Directory.'
    puts "Path provided: #{recordings_path}"
  elsif dry
    puts "User was found in #{file_found} out of #{file_checked}."
  elsif file_found <= 0
    puts "User #{user_id} was not found in any record."
    puts 'Make sure you spelled your user correctly.'
  else
    puts "User #{user_id} was removed from #{file_found} out of #{file_checked}."
  end
end

#
# bbb_user_data_all
#
class BbbUserData 

  @errmsg1 = "
        Please provide userId and recording ID like so:
        bbb-user -g -u <userID> -r <recordingPath>
    "
  @errmsg2 = 'The path you provided does not exist.'

  def initialize(userid, dirid)
    abort(@@errmsg1) if userid.nil? || dirid.nil?
    abort(@@errmsg2) unless check_file_exist(dirid.chomp('/'))
    @userid = userid
    @current_presenter = 'unknown'
    @meeting_end = @meeting_start = 0
    @dirid = dirid
    @recording_start = 0
    @speaking = false
    @csv = nil
    @row = []
    @last_seen = 0
    @recording_stop = 0
    @end_speaking = 0
    @copy_audio_list = []
    @audio_file = Dir.glob("#{@dirid}/audio/*.wav").first ||  
                  Dir.glob("#{@dirid}/audio/*.opus").first
  end

  def user_data
    copy_video
    user_info
  end

  def user_exist?
    doc = Nokogiri::XML(File.open("#{@dirid}/events.xml"))
    participants = doc.xpath('//userId')
    unless participants.any? { |participant| participant.text.eql? @userid }
      return false
    end
    true
  end

  def user_info
    unless user_exist?
      return false
    end
    base = File.basename(@dirid)
    CSV.open("/tmp/#{@userid}/info/#{base}-info.csv", 'a+') do |csv|
      @csv = csv
      csv << []
      csv << ["Info in database for user with ID(#{@userid})"]
      csv << ["From Dir: #{@dirid}"]
      csv << ['event', 'timestamp', 'module', 'Msg (if applicable)']
      puts "User: #{@userid}\tDirectory: #{@dirid}"
      get_data
    end
    display_table
    copy_audio
    true
  end

  def get_data
    file = Dir.glob("#{@dirid}/events.xml").first
    doc = Nokogiri::XML(File.open(File.expand_path(file)))
    events = doc.xpath('//event')
    @meeting_start = Integer(events.first.at_xpath('@timestamp').to_s)
    @meeting_end = @recording_stop = Integer(events.last.at_xpath('@timestamp').to_s)
    handle_events(events)
  end

  def display_table
    table = Terminal::Table.new title: "Info for user with id: #{@userid}",
                                headings: %w[event timestamp module],
                                rows: @row
    puts "user info's generated. Path: /tmp/#{@userid}/info.csv"
    puts table
  end

  def user?(event)
    e_name = event.at_xpath('@eventname').to_s
    if %w[StopWebcamShareEvent StartWebcamShareEvent].include? e_name
      e_stream = event.at_xpath('stream').content.to_s
      return e_stream.include? @userid
    end
    get_uid(event) == @userid
  end

  def get_uid(event)
    userid =event.at_xpath('userId') ||
            event.at_xpath('userid') ||
            event.at_xpath('senderId') ||
            event.at_xpath('participant')               
    userid.nil? ? 'unkown' : userid.content
  end

  def handle_events (events)
    events.each do |e|
      next if %w[WHITEBOARD].include? e.at_xpath('@module').to_s
      e_name = e.at_xpath('@eventname').to_s
      case e_name
      when 'StartRecordingEvent'
        @recording_start = Integer(e.at_xpath('recordingTimestamp').content.to_s)
      when 'StopRecordingEvent'
        @recording_stop = Integer(e.at_xpath('recordingTimestamp').content.to_s)  
      when 'SharePresentationEvent'
        next unless @current_presenter == @userid
        copy_presentation(e.at_xpath('presentationName').content.to_s)
      when 'DeskshareStartedEvent'
        next unless @current_presenter == @userid
        copy_deskshare("#{@dirid}/deskshare/#{e.at_xpath('stream').content}")
      when 'AssignPresenterEvent'
        @current_presenter = get_uid(e)
      end
      next unless user?(e)
      case e_name
      when 'ParticipantTalkingEvent'
        register_participant_talking_event(e)
      when 'ParticipantMutedEvent'
        register_participant_muted_event(e)
      when 'ParticipantLeftEvent'
        register_participant_left_event(e)
      end
      handle_event(e)
    end
  end

  def handle_event(e)
    e_module = e.at_xpath('@module').to_s
    t_stamp = f_time(Integer(e.at_xpath('@timestamp').to_s) - @recording_start)
    e_name = e.at_xpath('@eventname').to_s
    @csv << if e_module.eql? 'CHAT'
              [e_name, t_stamp, e_module, e.at_xpath('message').content.to_s.strip]
            else
              [e_name, t_stamp, e_module]
            end
    @row << [e_name, t_stamp, e_module]
  end

  def check_file_exist(pathtofile)
    File.exist?("#{pathtofile}/events.xml")
  end

  def copy_video
    Dir.glob("#{@dirid}/video/*/*.flv") do |videofile|
      if videofile.include?(@userid)
        system("cp #{videofile} /tmp/#{@userid}/videos/")
      end
    end
  end

  def copy_deskshare(stream_dir)
    Dir.glob("#{stream_dir}.*") do |deskshare|
      system("cp -r #{deskshare} /tmp/#{@userid}/deskshare/")
    end
  end

  def copy_presentation(p_file)
    command = "cp -r #{@dirid}/presentation/#{p_file} /tmp/#{@userid}/presentation/"
    system(command)
  end

  def register_participant_muted_event(event)
    e_timestamp = Integer(event.at_xpath('@timestamp').to_s) - @recording_start
    putc '.'
    if true?(event.at_xpath('muted').content.to_s)
      @last_seen = e_timestamp
      if @speaking
        @copy_audio_list.push(make_audio_removal_request(@start_speaking.to_s, e_timestamp.to_s))
        @speaking = false
      end
    end
  end

  def register_participant_talking_event(event)
    e_timestamp = Integer(event.at_xpath('@timestamp').to_s) - @recording_start
    if true?(event.at_xpath('talking').content)
      @start_speaking = e_timestamp
      @speaking = true
    else
      putc '.'
      @copy_audio_list.push(make_audio_removal_request(@start_speaking.to_s, e_timestamp.to_s))
      @speaking = false
    end
  end

  def register_participant_left_event(event)
    if @speaking
      e_timestamp = (Integer(event.at_xpath('@timestamp').to_s) - @recording_start)
      putc '.'
      @copy_audio_list.push(make_audio_removal_request(@start_speaking.to_s, e_timestamp.to_s))
    end
  end

  def true?(obj)
    obj.to_s == 'true'
  end

  def f_time(time)
    Time.at(time / 1000).utc.strftime('%H:%M:%S')
  end

  def copy_audio
    if @audio_file.nil? || @copy_audio_list.empty?
      puts "User did not speak in this recording.\nNo audio has been removed"
      return
    end
    recordingDuration = @recording_stop - @recording_start
    total_time = 0
    command = ['ffmpeg', '-i', @audio_file, '-af']
    filter = "volume=volume=0:enable='"

    filter += 'between(t\\,1'
    filter += "\\,#{ Integer(@copy_audio_list.first[:start])  / 1000})"
    total_time += Integer(@copy_audio_list.first[:start])
    filter += '+'
    loop do
      putc '.'
      @start = @copy_audio_list.first[:finish]
      @copy_audio_list.shift
      if @copy_audio_list.empty?
        filter += "between(t\\,#{Integer(@start) / 1000}"
        filter += "\\,#{recordingDuration / 1000})"
        total_time += recordingDuration - Integer(@start)
        break
      end
      filter += "between(t\\,#{Integer(@start) / 1000}"
      filter += "\\,#{ Integer(@copy_audio_list.first[:start]) / 1000 })"
      total_time += Integer(@copy_audio_list.first[:start]) - Integer(@start)
      filter += '+'
    end
    command << filter
    command << '-y'
    command << "temp#{File.extname(@audio_file)}"
    system(*command)
    FileUtils.mv "temp#{File.extname(@audio_file)}", "/tmp/#{@userid}/audio/#{File.basename(@dirid)}#{File.extname(@audio_file)}"
    puts 'All audio recordings have been editted and copied'
    puts "Recording total time: #{f_time(recordingDuration)} ."
    puts "Total time muted: #{f_time(total_time)} ."
  end

  def make_audio_removal_request(start, finish)
    { start: start, finish: finish }
  end

end
#
# bbb-user-data-forget.rb
#
class BbbUserDataForget 

  @errmsg1 = "
        Please provide userId and recording ID like so:
        bbb-user -D -u <userID> -r <recordingPath>
    "
  @errmsg2 = 'The path you provided does not exist.'

  def initialize(user_id, dir_id, dry = false)
    abort(@errmsg1) if user_id.nil? || dir_id.nil?
    abort(@errmsg2) unless check_file_exist(dir_id.chomp('/'))
    @removalList = []
    @meeting_start = @start_speaking = 0
    @recording_start = 0
    @current_presenter = nil
    @meeting_end = 0
    @user_id = user_id
    @dir_id = dir_id
    @dry = dry
    @rows = []
    @deltedlist = []
    @speaking = false
    @rows << %w[event user_Id module removed start end]
    @audio_file = Dir.glob("#{@dir_id}/audio/*.wav").first ||  
                  Dir.glob("#{@dir_id}/audio/*.opus").first
  end

  def user_exist?
    doc = Nokogiri::XML(File.open("#{@dir_id}/events.xml"))
    participants = doc.xpath('//userId')
    unless participants.any? { |participant| participant.text.eql? @user_id }
      return false
    end
    true
  end

  def delUserInfo
    unless user_exist?
      return false
    end
    puts @dry ? 'Dry run' : 'Data removal run'
    puts "data concerning user with Id: #{@user_id}"
    @current_presenter = 'unknown'

    file = Dir.glob("#{@dir_id}/events.xml").first
    doc = Nokogiri::XML(File.open(File.expand_path(file)))
    events = doc.xpath('//event')
    @meeting_start = Integer(events.first.at_xpath('@timestamp').to_s)
    @meeting_end = Integer(events.last.at_xpath('@timestamp').to_s)
    events.each do |event|
      @dry && next if %w[WHITEBOARD].include? event.at_xpath('@module').to_s
      e_name = event.at_xpath('@eventname').to_s
      case e_name
      when 'StartRecordingEvent'
        @recording_start = Integer(event.at_xpath('recordingTimestamp').content.to_s)
        next
      when 'AssignPresenterEvent'
        @current_presenter = event.at_xpath('userid').content.to_s
        remove_event(event)
      when 'ResizeAndMoveSlideEvent', 'GotoSlideEvent'
        if @current_presenter == @user_id
          remove_event(event)
          next
        end
      when 'SharePresentationEvent'
        if @current_presenter == @user_id
          pres_dir = event.at_xpath('presentationName').content.to_s
          if @dry
            puts "presentation file to be deleted #{pres_dir}"
            display_event(event, 'X')
          else
            unless @deltedlist.include? pres_dir
              @deltedlist.push(pres_dir)
              system("rm -r #{@dir_id}/presentation/#{pres_dir}")
              puts "presentation file #{@dir_id}/presentation/#{pres_dir} deleted."
            end  
            remove_event(event)
          end
          next
        end
      when 'DeskshareStartedEvent'
        if @current_presenter == @user_id
          stream_dir = event.at_xpath('stream').content.to_s
          Dir.glob("#{@dir_id}/deskshare/#{stream_dir}.*") do |desk_file|
            if @dry
              puts "deskshare file to be deleted : #{desk_file}"
              display_event(event, 'X')
            else
              system("rm -r #{desk_file}")
              puts "Deskshare file #{@dir_id}/presentation/#{stream_dir} deleted."
              remove_event(event)
            end
          end
          next
        end
      when 'PollStartedRecordEvent', 'PollStoppedRecordEvent', 'UserRespondedToPollRecordEvent'
        if @current_presenter == @user_id
          if @dry
            display_event(event, 'X')
          else
            remove_event(event)
          end
        end
        next
      else
        next unless user?(event)
        if e_name.eql? 'ParticipantJoinEvent'
          e_stamp = event.at_xpath('@timestamp').to_s
          @start_speaking = (Integer(e_stamp) - @recording_start)
        end
        remove_event(event)
      end
    end
    remove_video
    puts
    table = Terminal::Table.new title: 'Info',
    headings: ["id: #{@user_id}", " Meeting path: #{File.basename(@dir_id)}"], 
    rows: @rows
    puts table
    remove_audio
    File.open(File.expand_path(file), 'w') { |f| doc.write_xml_to f }
    true
  end

  def user?(event)
    e_name = event.at_xpath('@eventname').to_s
    if %w[StopWebcamShareEvent StartWebcamShareEvent].include? e_name
      e_stream = event.at_xpath('stream').content.to_s
      return e_stream.include? @user_id
    end
    get_uid(event) == @user_id
  end

  def get_uid(event)
    if (%W[PRESENTATION].include? event.at_xpath('@module').to_s)
        return @current_presenter
    elsif (%W[PollStartedRecordEvent PollStoppedRecordEvent].include? event.at_xpath('@eventname').to_s)
      return @current_presenter
    end  
    userid = event.at_xpath('assignedBy') ||
             event.at_xpath('userId') ||
             event.at_xpath('userid') ||
             event.at_xpath('senderId') ||
             event.at_xpath('participant')
    userid.nil? ? 'unkown' : userid.content
  end

  def remove_audio_event(event)
    event.remove
  end

  def remove_video
    Dir.glob("#{@dir_id}/video/*/*.flv") do |videofile|
      videofile.include?(@user_id) && !@dry && system("rm #{videofile}") && puts("#{videofile} removed.")
    end
  end

  def make_audio_removal_request(start, finish)
    { start: start, finish: finish }
  end

  def remove_audio
    if @audio_file.nil? || @removalList.empty?
      puts("No audio file present.\nNo audio has been removed")
      return
    end
    total_time = 0
    command = ['ffmpeg', '-i', @audio_file, '-af']
    filter = "volume=volume=0:enable='"

    loop do
      filter += "between(t\\,#{Integer(@removalList.first[:start]) / 1000}"
      filter += "\\,#{Integer(@removalList.first[:finish]) / 1000})"
      total_time += Integer(@removalList.first[:finish]) - Integer(@removalList.first[:start])
      @removalList.shift
      @removalList.empty? && break
      filter += '+'
    end
    filter += "'"

    command << filter
    command << '-y'
    command << 'temp.wav'
    if @dry
      puts "command that was going to run: \n#{command.join(' ')}"
    else
      system(*command)
      FileUtils.mv 'temp.wav', @audio_file
      puts 'All audio recordings have been removed'
    end
    puts "Recording total time: #{f_time(@meeting_end - @recording_start)} ."
    puts "Total time muted: #{f_time(total_time)} ."
  end

  def f_time(time)
    Time.at(time / 1000).utc.strftime('%H:%M:%S')
  end

  def removeParticipantMutedEvent(event)
    e_timestamp = (Integer(event.at_xpath('@timestamp').to_s) - @recording_start)
    if true?(event.at_xpath('muted').content.to_s) 
        putc '.'
        if @speaking
          @removalList.push(make_audio_removal_request(@start_speaking.to_s, e_timestamp.to_s))
          @speaking = false
        end
        display_event(event, 'X', 'mic muted:', f_time(e_timestamp))
    else 
      e_timestamp = (Integer(event.at_xpath('@timestamp').to_s) - @recording_start)
      putc '.'
      display_event(event, 'X', 'mic unmuted:', f_time(e_timestamp))
    end
    !@dry && remove_audio_event(event)
  end

  def removeParticipantTalkingEvent(event)
    e_timestamp = (Integer(event.at_xpath('@timestamp').to_s) - @recording_start)
    if true?(event.at_xpath('talking').content)
      @start_speaking = e_timestamp
      @speaking = true
      display_event(event, 'X', 'mic on:', f_time(e_timestamp))
    else
      putc '.'
      @removalList.push(make_audio_removal_request(@start_speaking.to_s, e_timestamp.to_s))
      display_event(event, 'X', 'mic off:', f_time(e_timestamp))
      @speaking = false
    end
    !@dry && remove_audio_event(event)
  end

  def remove_participant_left_event(event)
    if @speaking
      e_timestamp = (Integer(event.at_xpath('@timestamp').to_s) - @recording_start)
      putc '.'
      @removalList.push(make_audio_removal_request(@start_speaking.to_s, e_timestamp.to_s))
      display_event(event, 'X', 'Participant left:', f_time(e_timestamp))
    end
    !@dry && remove_audio_event(event)
  end

  def true?(obj)
    obj.to_s == 'true'
  end

  def remove_event(event)
    !@dry && event.remove
    e_module = event.at_xpath('@module')
    e_name = event.at_xpath('@eventname').to_s
    e_timestamp = Integer(event.at_xpath('@timestamp').to_s)
    return if ['WHITEBOARD'].include? e_module.to_s
    case e_name
    when 'ParticipantJoinEvent'
      return display_event(event, 'X', 'user joined at: ', f_time(e_timestamp - @meeting_start))
    when 'ParticipantMutedEvent'
      removeParticipantMutedEvent(event)
    when 'ParticipantLeftEvent'
      remove_participant_left_event(event)
    when 'ParticipantTalkingEvent'
      removeParticipantTalkingEvent(event)
    when 'StartWebcamShareEvent', 'StopWebcamShareEvent'
      remove_start_stop_share_event(event)
    else
      display_event(event, 'X')
    end
  end

  def remove_start_stop_share_event(event)
    e_name = event.at_xpath('@eventname')
    e_module = event.at_xpath('@module')
    @rows << [e_name, @user_id, e_module, 'X', '', '']
  end

  def display_event(event, delete, start = '', finish = '')
    e_name = event.at_xpath('@eventname')
    e_module = event.at_xpath('@module')
    u_name = get_uid(event)
    @rows << [e_name, u_name, e_module, delete, start, finish]
  end

  def check_file_exist(pathtofile)
    File.exist?("#{pathtofile}/events.xml")
  end
end

if opts[:userId].nil? || (!opts[:getData] && !opts[:DelData])
  puts <<HERE

./bbb-user -u <user_id> [-r <recordings_dir_path>] -g|-D

Parameters

  -u userID taken from an events.xml file
  -r path to records drectory (default: /var/bigbluebutton/recording/raw)
  -g get the personal information for a given userID
  -D delete the personal information for a user from recordings.

Dry run:

  When specifying the '-D' option, you may also have bbb-user do a dry run for the deletion

  -d Output results of delation without performing the deletion action

HERE

  exit
end

abort("Script doesn't have sudo persmissions.\nAre you root?") unless Process.uid == 0
if opts[:getData]
  bbb_user_data_all(opts[:userId], opts[:recordingsPath])
elsif opts[:DelData]
  bbb_user_data_forget_all(opts[:userId], opts[:recordingsPath], opts[:dryrun])
else
  puts 'Error!'
end
